{
  "version": 3,
  "sources": ["../../crypto-hash/utilities.js", "../../crypto-hash/browser.js"],
  "sourcesContent": ["export const bufferToHex = buffer => {\n\tconst view = new DataView(buffer);\n\n\tlet hexCodes = '';\n\tfor (let index = 0; index < view.byteLength; index += 4) {\n\t\thexCodes += view.getUint32(index).toString(16).padStart(8, '0');\n\t}\n\n\treturn hexCodes;\n};\n", "import {bufferToHex} from './utilities.js';\n\nconst create = algorithm => async (buffer, {outputFormat = 'hex'} = {}) => {\n\tif (typeof buffer === 'string') {\n\t\tbuffer = new globalThis.TextEncoder().encode(buffer);\n\t}\n\n\tconst hash = await globalThis.crypto.subtle.digest(algorithm, buffer);\n\n\treturn outputFormat === 'hex' ? bufferToHex(hash) : hash;\n};\n\nexport const sha1 = create('SHA-1');\nexport const sha256 = create('SHA-256');\nexport const sha384 = create('SHA-384');\nexport const sha512 = create('SHA-512');\n"],
  "mappings": ";;;AAAO,IAAM,cAAc,YAAU;AACpC,QAAM,OAAO,IAAI,SAAS,MAAM;AAEhC,MAAI,WAAW;AACf,WAAS,QAAQ,GAAG,QAAQ,KAAK,YAAY,SAAS,GAAG;AACxD,gBAAY,KAAK,UAAU,KAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAAA,EAC/D;AAEA,SAAO;AACR;;;ACPA,IAAM,SAAS,eAAa,OAAO,QAAQ,EAAC,eAAe,MAAK,IAAI,CAAC,MAAM;AAC1E,MAAI,OAAO,WAAW,UAAU;AAC/B,aAAS,IAAI,WAAW,YAAY,EAAE,OAAO,MAAM;AAAA,EACpD;AAEA,QAAM,OAAO,MAAM,WAAW,OAAO,OAAO,OAAO,WAAW,MAAM;AAEpE,SAAO,iBAAiB,QAAQ,YAAY,IAAI,IAAI;AACrD;AAEO,IAAM,OAAO,OAAO,OAAO;AAC3B,IAAM,SAAS,OAAO,SAAS;AAC/B,IAAM,SAAS,OAAO,SAAS;AAC/B,IAAM,SAAS,OAAO,SAAS;",
  "names": []
}
